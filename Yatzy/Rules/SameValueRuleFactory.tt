<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>
<#
Dictionary<string, int> rules = new()
	{
		{ "Aces", 1 },
		{ "Twos", 2 },
		{ "Threes", 3 },
		{ "Fours", 4 },
		{ "Fives", 5 },
		{ "Sixes", 6 }
	};
#>
// This is a generated file!
// Do not manually modify as your changes will be overwritten.

using Serilog;

using Yatzy.Dices;
using Yatzy.PointsCalculators;

namespace Yatzy.Rules;
/// <summary>
/// A factory to create predetermined <see cref="SameValueRule{TDice}"/>.
/// </summary>
public static class SameValueRuleFactory
{
	<# foreach (KeyValuePair<string, int> pair in rules)
	{
	#>

	// Generated Method.

	/// <summary>
	/// Represents a <see cref="SameValueRule{TDice}"/> of <#= pair.Key #> with the value of <#= pair.Value #>.
	/// </summary>
	/// <param name="logger"><inheritdoc cref="SameValueRule{TDice}.SameValueRule(ILogger, string, int, IPointsCalculator)" path="/param[@name='logger']"/></param>
	/// <param name="pointsCalculator"><inheritdoc cref="SameValueRule{TDice}.SameValueRule(ILogger, string, int, IPointsCalculator)" path="/param[@name='pointsCalculator']"/></param>
	/// <returns>A new <see cref="SameValueRule{TDice}"/> which contains the predetermined values.</returns>
	public static SameValueRule<TDice> <#= pair.Key #><TDice>(ILogger logger, IPointsCalculator pointsCalculator)
		where TDice : IDice
		=> new(logger, nameof(<#= pair.Key #>), <#= pair.Value #>, pointsCalculator);
	<#
	};
	#>
}